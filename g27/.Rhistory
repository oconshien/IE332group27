}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
n<- 3
env <- enviornmentQ(state, actions, actioncor, n)
states <- paste0("s",rep(1:n^2))
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
statemat
rm(list = ls())
actions <- c("up", "down", "left", "right","NW", "NE","SW","SE")
n<- 3
states <- paste0("s",rep(1:n^2))
states
enviornmentQ <- function (state, action)
{
print(state)
n <- 3
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
print(curstate)
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
statemat
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
allowed <- function(cor,n,actioncor, action)
{
if(action == "up" & (cor[2] + actioncor["up2"]<1)){
return(FALSE)
}
if(action == "down" & (cor[2] + actioncor['down2']>n)){
return(FALSE)
}
if(action == "left" & (cor[1] + actioncor["left1"]<1)){
return(FALSE)
}
if(action == "right" & (cor[1] + actioncor["right1"]>n)){
return(FALSE)
}
if(action == "NW" & ((cor[1] + actioncor["NW1"]<1)|(cor[2] + actioncor["NW2"]<1))){
return(FALSE)
}
if(action == "SE" & ((cor[1] + actioncor["SE1"]>n)|(cor[2] + actioncor["SE2"]>n))){
return(FALSE)
}
if(action == "NE" & ((cor[1] + actioncor["NE1"]>n)|(cor[2] + actioncor["NE2"]<1))){
return(FALSE)
}
if(action == "SW" & ((cor[1] + actioncor["SW1"]<1)|(cor[2] + actioncor["SW2"]>n))){
return(FALSE)
}
else{
return(TRUE)
}
}
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
data <- env <- enviornmentQ(state, actions, actioncor, n)
control <- list(alpha = 0.1, gamma = 0.5, epsilon = 0.1)
model <- ReinforcementLearning(data, s = "state", a="Action", r="reward", s_new="NextState", control = control)
data <- env <- enviornmentQ(state, actions, actioncor, n)
enviornmentQ <- function (state, action)
{
print(state)
n <- 3
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
print(curstate)
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
data
model <- ReinforcementLearning(data, s = "state", a="Action", r="reward", s_new="NextState", control = control)
data
control <- list(alpha = 0.1, gamma = 0.5, epsilon = 0.1)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
# Print summary statistics
summary(model)
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
n<- 10
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
enviornmentQ <- function (state, action)
{
n <- 10
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
source('~/IE 332/code/IE332 A3/A3Q2.R')
states <- paste0("s",rep(1:n^2))
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
budget <- 100000
cityGrid <- buildCity(1)
setwd("~/IE 332/IE332group27/g27")
source('~/IE 332/IE332group27/g27/buildCity.R')
source('~/IE 332/IE332group27/g27/OptimizationProblem.R')
source('~/IE 332/IE332group27/g27/randomCollect.R')
source('~/IE 332/IE332group27/g27/smoothing_reg_month_maker.R')
source('~/IE 332/IE332group27/g27/sortPMtest.R')
source('~/IE 332/IE332group27/g27/runMLClass.R')
cityGrid <- buildCity(1)
MappedNetwork<- SA(budget, cityGrid, just_values = F)
budget <- 1000000
budget <- 300000
MappedNetwork<- SA(budget, cityGrid, just_values = F)
locationSen <- MappedNetwork$best
points <- c("pm010"=0, "pm025"=0, "pm100"=0)
i = 0
while ( i < 100){
point <- sortPM(Sys.time(), 2)
points <- rbind(points, point)
i <- i + 1
}
points
data_tester <- cbind(locationSen, points)
points <- NULL
points <- NULL
i = 0
while ( i <= length(locationSen)){
point <- sortPM(Sys.time(), 2)
points <- rbind(points, point)
i <- i + 1
}
points
data_tester <- cbind(locationSen, points)
locationSen
length(locationSen)
dim(locationSen)
row(locationSen)
length(row(locationSen))
length((locationSen))
length(dim(locationSen))
(dim(locationSen))
dim(locationSen)[1]
points <- NULL
i = 0
source('~/IE 332/IE332group27/g27/runMLClass.R')
points <- NULL
point <- NULL
i = 0
while (i < dim(locationSen)[1]){
point <- sortPM(Sys.time(), 2)
points <- rbind(points, point)
i <- i + 1
}
points
data_tester <- cbind(locationSen, points)
data_tester
city_grid_radius <- 750
#Run MlClassifier Once then will be able to predict for any pm values
example <- MlClassifier()
source('~/IE 332/IE332group27/g27/MLclassifier.R')
#Run MlClassifier Once then will be able to predict for any pm values
example <- MlClassifier()
#Run MlClassifier Once then will be able to predict for any pm values
example <- MlClassifier()
try <- data_label(points, example)
try
try <- data_label(data_tester, example)
try
points <- NULL
point <- NULL
i = 0
while (i < dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
city_grid_radius <- 750
while (i < dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
1
while (i <= dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
i = 1
while (i <= dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
data_tester <- cbind(locationSen, points)
try <- data_label(data_tester, example)
try
try <- data_label(data_tester, example)
try
try <- data_label(points, example)
try
source('~/IE 332/IE332group27/g27/MLclassifier.R')
try <- data_label(points, example)
try <- data_label(points, example)
source('~/IE 332/IE332group27/g27/MLclassifier.R')
try <- data_label(points, example)
try
source('~/IE 332/IE332group27/g27/move_mobile.R')
z <- priority_destinations(locationSen, try)
try
locationSen
z <- priority_destinations(locationSen, try)
source('~/IE 332/IE332group27/g27/move_mobile.R')
z <- priority_destinations(locationSen, try)
z
source('~/IE 332/IE332group27/g27/runMLClass.R')
budget <- 300000
city_grid_radius <- 750
MappedNetwork<- SA(budget, cityGrid, just_values = F)
locationSen <- MappedNetwork$best
points <- NULL
point <- NULL
i = 1
while (i <= dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
try <- data_label(points, example)
try
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/runMLClass.R')
try <- data_label(points, example)
try
z <- priority_destinations(locationSen, try)
z
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/move_mobile.R')
source('~/IE 332/IE332group27/g27/move_mobile.R')
z <- priority_destinations(locationSen, try)
z
source('~/IE 332/IE332group27/g27/move_mobile.R')
z <- priority_destinations(locationSen, try)
z
source('~/IE 332/IE332group27/g27/move_mobile.R')
z <- priority_destinations(locationSen, try)
z
locationSen
budget <- 300000
city_grid_radius <- 750
MappedNetwork<- SA(budget, cityGrid, just_values = F)
locationSen <- MappedNetwork$best
value <- cityGrid[as.integer(locationSen[1,1]), as.integer(locationSen[1,2])]
points <- NULL
point <- NULL
i = 1
while (i <= dim(locationSen)[1]){
point <- sortPM(Sys.time(), cityGrid[trunc(locationSen[i,1]/20) + city_grid_radius, trunc(locationSen[i,2]/20) + city_grid_radius])
points <- rbind(points, point)
i <- i + 1
}
source('~/IE 332/IE332group27/g27/OptimizationProblem.R')
locationSen
source('~/IE 332/IE332group27/g27/OptimizationProblem.R')
MappedNetwork<- SA(budget, cityGrid, just_values = F)
locationSen <- MappedNetwork$best
locationSen
try <- data_label(points, example)
z <- priority_destinations(locationSen, try)
z
locationSen
updates <- nearest_sensor(z)
source('~/IE 332/IE332group27/g27/move_mobile.R')
updates <- nearest_sensor(z, locationSen, 0)
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/move_mobile.R')
updates <- nearest_sensor(z, locationSen, 0)
source('~/IE 332/IE332group27/g27/move_mobile.R')
updates <- nearest_sensor(z, locationSen, 0)
destination <- z
destination
sensors <- locationSen
sensors
mobile_sensors <- sensors[which(sensors[,3]==1),]
mobile_sensors
num_sensors <- dim(mobile_sensors)[1]
num_sensors
for(j in 1:length(destination[,1])){
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[j,1])^2+(mobile_sensors[i,2]-destination[j,2])^2)
}
#add in piroirty factor for closest drone
#good vs bad air quality choice
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination[j,], sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1] + sensors[near_sensor,1]
sensors[near_sensor,2] <- moved_sensor[2] + sensors[near_sensor,2]
}
dist_vec <- rep(0,num_sensors)
j <- 1
i <- NULL
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[j,1])^2+(mobile_sensors[i,2]-destination[j,2])^2)
}
dist_vec
#add in piroirty factor for closest drone
#good vs bad air quality choice
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
nearest_sensor
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
near_sensor
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination[j,], sensors[near_sensor,])
destination[j,]
q <- destination[j,]
q[1]
as.integer(q)
source('~/IE 332/IE332group27/g27/move_mobile.R')
updates <- nearest_sensor(z, locationSen, 0)
uupdate
update
updates
locationSen == updates
