move_mobile(c(sensors[50,1],sensors[50,2]),sensors,3)
sensors[50,]
sensors[34,]
move_mobile(c(sensors[34,1],sensors[34,2]),sensors,3)
sensors[81,]
lm(y ~ x, sensors)
lm(y ~ x)
dataF <- matrix(c(0,0,1,1),nrow = 2, ncol = 2)
dataF
dataF <- matrix(c(0,1,0,1),nrow = 2, ncol = 2)
dataF
as.data.frame(dataF)
dataF<-as.data.frame(dataF)
lm(y ~ x,dataF)
y <- c(0,0)
x <- (1,2)
x <- c(1,2)
lm(y ~ x)
y <- c(0,1)
x <- c(0,1)
lm(y ~ x)
x <- c(0,2)
lm(y ~ x)
move_mobile <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
print(dist_vec)
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
y <- c(destination[2], sensor[near_sensor, 2])
x <- c(destination[1], sensor[near_sensor,1])
lm(y ~ x)
}
move_mobile(c(sensors[34,1],sensors[34,2]),sensors,3)
move_mobile <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
print(dist_vec)
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
y <- c(destination[2], sensors[near_sensor, 2])
x <- c(destination[1], sensors[near_sensor,1])
lm(y ~ x)
}
move_mobile(c(sensors[34,1],sensors[34,2]),sensors,3)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
y <- c(destination[2], sensors[near_sensor, 2])
x <- c(destination[1], sensors[near_sensor,1])
dist_line <- lm(y ~ x)
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[,1])
y <- c(destination[2], sensors[,2])
dist_line <- lm(y ~ x)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
y <- c(destination[2], sensors[near_sensor, 2])
x <- c(destination[1], sensors[near_sensor,1])
dist_line <- lm(y ~ x)
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], sensors[2])
dist_line <- lm(y ~ x)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
y <- c(destination[2], sensors[near_sensor, 2])
x <- c(destination[1], sensors[near_sensor,1])
dist_line <- lm(y ~ x)
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
y <- c(destination[2], sensors[near_sensor, 2])
x <- c(destination[1], sensors[near_sensor,1])
dist_line <- lm(y ~ x)
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
print(dist_line)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
x_dest <- sqrt(dest/(dist_line$x+1))
y_dest <- dist_line$x * x_dest
} else{
dest <- distance
#set equal to destination
}
print(x_dest)
print(y_dest)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
x_dest <- sqrt(dest/(dist_line$coeff[[2]]+1))
y_dest <- dist_line$coeff[[2]] * x_dest
} else{
dest <- distance
#set equal to destination
}
print(x_dest)
print(y_dest)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
x_dest <- sqrt(dest/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
} else{
dest <- distance
#set equal to destination
}
print(x_dest+near_sensor[1])
print(y_dest+near_sensor)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
x_dest <- sqrt(dest/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
} else{
dest <- distance
#set equal to destination
}
print(x_dest)
print(y_dest)
}
nearest_sensor(sensors[34,],sensors,1)
lm(y~x)
line<-lm(y~x)
line$coeff[[2]]
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
print(dest)
x_dest <- sqrt(dest/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
print(x_dest)
print(y_dest)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
print(dest)
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
print(x_dest)
print(y_dest)
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
print(dest)
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
print(x_dest + near_sensor[1])
print(y_dest + near_sensor[2])
}
nearest_sensor(sensors[34,],sensors,1)
sensors[34,]
sensors[3]
sensors[3,]
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
print(near_sensor)
mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
print(dest)
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
print(x_dest + near_sensor[1])
print(y_dest + near_sensor[2])
}
nearest_sensor(sensors[34,],sensors,1)
sensors[34,]
sensors[81,]
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
print(near_sensor)
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1]
sensors[near_sensor,2] <- moved_sensor[2]
print(sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
print(dest)
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
return(c(x_dest,y_dest))
}
nearest_sensor(sensors[34,],sensors,1)
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1] + sensors[near_sensor,2]
sensors[near_sensor,2] <- moved_sensor[2] + sensors[near_sensor,2]
print(sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
return(c(x_dest,y_dest))
}
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1] + sensors[near_sensor,1]
sensors[near_sensor,2] <- moved_sensor[2] + sensors[near_sensor,2]
print(sensors[near_sensor,])
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
return(c(x_dest,y_dest))
}
nearest_sensor(sensors[34,],sensors,1)
sensors
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1] + sensors[near_sensor,1]
sensors[near_sensor,2] <- moved_sensor[2] + sensors[near_sensor,2]
sensors
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
return(c(x_dest,y_dest))
}
sensors
nearest_sensor <- function(destination, sensors, quality){
mobile_sensors <- sensors[which(sensors[,3]==1),]
num_sensors <- dim(mobile_sensors)[1]
dist_vec <- rep(0,num_sensors)
for(i in 1:num_sensors){
dist_vec[i] <- sqrt((mobile_sensors[i,1]-destination[1])^2+(mobile_sensors[i,2]-destination[2])^2)
}
nearest_sensor <- which(dist_vec == min(dist_vec[dist_vec!=min(dist_vec)]))
near_sensor <- which(mobile_sensors[nearest_sensor,1] == sensors[,1] & mobile_sensors[nearest_sensor,2] == sensors[,2])
moved_sensor <- mobile_sensor(dist_vec[nearest_sensor],destination, sensors[near_sensor,])
sensors[near_sensor,1] <- moved_sensor[1] + sensors[near_sensor,1]
sensors[near_sensor,2] <- moved_sensor[2] + sensors[near_sensor,2]
return(sensors)
}
mobile_sensor <- function(distance, destination, near_sensor){
x <- c(destination[1], near_sensor[1])
y <- c(destination[2], near_sensor[2])
dist_line <- lm(y ~ x)
if (distance > 1000){
dest <- 1000
} else{
dest <- distance
#set equal to destination
}
x_dest <- sqrt(dest^2/(dist_line$coeff[[2]]^2+1))
y_dest <- dist_line$coeff[[2]] * x_dest
return(c(x_dest,y_dest))
}
sensors
nearest_sensor(sensors[34,],sensors,1)
