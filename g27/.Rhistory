{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
n<- 3
env <- enviornmentQ(state, actions, actioncor, n)
states <- paste0("s",rep(1:n^2))
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
statemat
rm(list = ls())
actions <- c("up", "down", "left", "right","NW", "NE","SW","SE")
n<- 3
states <- paste0("s",rep(1:n^2))
states
enviornmentQ <- function (state, action)
{
print(state)
n <- 3
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
print(curstate)
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
statemat
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
allowed <- function(cor,n,actioncor, action)
{
if(action == "up" & (cor[2] + actioncor["up2"]<1)){
return(FALSE)
}
if(action == "down" & (cor[2] + actioncor['down2']>n)){
return(FALSE)
}
if(action == "left" & (cor[1] + actioncor["left1"]<1)){
return(FALSE)
}
if(action == "right" & (cor[1] + actioncor["right1"]>n)){
return(FALSE)
}
if(action == "NW" & ((cor[1] + actioncor["NW1"]<1)|(cor[2] + actioncor["NW2"]<1))){
return(FALSE)
}
if(action == "SE" & ((cor[1] + actioncor["SE1"]>n)|(cor[2] + actioncor["SE2"]>n))){
return(FALSE)
}
if(action == "NE" & ((cor[1] + actioncor["NE1"]>n)|(cor[2] + actioncor["NE2"]<1))){
return(FALSE)
}
if(action == "SW" & ((cor[1] + actioncor["SW1"]<1)|(cor[2] + actioncor["SW2"]>n))){
return(FALSE)
}
else{
return(TRUE)
}
}
sampleExperience(N = 1000, env= enviornmentQ, states= states, actions = actions)
data <- env <- enviornmentQ(state, actions, actioncor, n)
control <- list(alpha = 0.1, gamma = 0.5, epsilon = 0.1)
model <- ReinforcementLearning(data, s = "state", a="Action", r="reward", s_new="NextState", control = control)
data <- env <- enviornmentQ(state, actions, actioncor, n)
enviornmentQ <- function (state, action)
{
print(state)
n <- 3
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
print(curstate)
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
data
model <- ReinforcementLearning(data, s = "state", a="Action", r="reward", s_new="NextState", control = control)
data
control <- list(alpha = 0.1, gamma = 0.5, epsilon = 0.1)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
# Print summary statistics
summary(model)
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
n<- 10
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
enviornmentQ <- function (state, action)
{
n <- 10
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
actioncor <- c("up"=c(0,-1), "down"=c(0,1), "left"=c(-1,0), "right"=c(1,0),"NW"=c(-1,-1), "NE"=c(1,-1),"SW"=c(-1,1),"SE"=c(1,1))
x<-which(statemat == state, arr.ind=T)
curstate <- c(x[1],x[2])
next_state <- state
if (action == "up" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["up1"] + curstate[1]
curstate[2] <- actioncor["up2"]+ curstate[2]
}
if (action == "down" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["down1"]+ curstate[1]
curstate[2] <- actioncor["down2"]+ curstate[2]
}
if (action == "left" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["left1"]+ curstate[1]
curstate[2] <- actioncor["left2"]+ curstate[2]
}
if (action == "right" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["right1"]+ curstate[1]
curstate[2] <- actioncor["right2"]+ curstate[2]
}
if (action == "NE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NE1"]+ curstate[1]
curstate[2] <- actioncor["NE2"]+ curstate[2]
}
if (action == "NW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["NW1"]+ curstate[1]
curstate[2] <- actioncor["NW2"]+ curstate[2]
}
if (action == "SW" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SW1"]+ curstate[1]
curstate[2] <- actioncor["SW2"]+ curstate[2]
}
if (action == "SE" & allowed(curstate,n,actioncor,action)==TRUE)
{
curstate[1] <- actioncor["SE1"]+ curstate[1]
curstate[2] <- actioncor["SE2"]+ curstate[2]
}
if(curstate[1] == n & curstate[2] == n)
{
reward <- 100
}
else{
reward <- -1
}
print(reward)
out <- list(NextState = statemat[curstate[1],curstate[2]], Reward = reward)
return(out)
}
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
source('~/IE 332/code/IE332 A3/A3Q2.R')
states <- paste0("s",rep(1:n^2))
statemat <- matrix(paste0("s",rep(1:n^2)),n,n)
data <- sampleExperience(N = 1000, env = enviornmentQ, states = states, actions = actions)
model <- ReinforcementLearning(data, s = "State", a="Action", r="Reward", s_new="NextState", control = control)
model
setwd("~/IE 332/IE332group27/g27")
source('~/IE 332/IE332group27/g27/MLclassifier.R')
test <- data.frame("pm010"=100, "pm025"=100, "pm100"=100)
example <- MlClassifier(test)
example
source('~/IE 332/IE332group27/g27/sortPMtest.R')
#Generated Pm Values
point <- sortPM(Sys.time(), 1)
source('~/IE 332/IE332group27/g27/smoothing_reg_month_maker.R')
#Generated Pm Values
point <- sortPM(Sys.time(), 1)
source('~/IE 332/IE332group27/g27/randomCollect.R')
#Generated Pm Values
point <- sortPM(Sys.time(), 1)
example <- MlClassifier(point)
example
#Generated Pm Values
point <- sortPM(Sys.time(), 0)
example <- MlClassifier(point)
example
Sys.time()
"2019-11-06 24:51:50 CET"
date("2019-11-06 20:51:50 CET")
time("2019-11-06 20:51:50 CET")
as.Date.POSIXlt("2019-11-06 20:51:50 CET")
as.Date.POSIXlt(2019-11-06 20:51:50 CET)
as.POSIXlt("2019-11-06 20:51:50 CET")
as.POSIXlt("2019-11-06 20:51:50 CET")
date <- as.POSIXlt("2019-11-06 20:51:50 CET")
point <- sortPM(Sys.time(), 0)
date <- as.POSIXlt("2019-05-06 20:51:50 CET")
point <- sortPM(date, 0)
point
example <- MlClassifier(point)
example
january = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/january-2017.csv"))
february = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/february-2017.csv"))
march = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/march-2017.csv"))
april = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/april-2017.csv"))
may = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/may-2017.csv"))
june = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/june-2017.csv"))
july = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/july-2017.csv"))
august = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/august-2017.csv"))
september = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/september-2017.csv"))
october = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/october-2017.csv"))
november = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/november-2017.csv"))
december = as_tibble(fread("air-quality-data-from-extensive-network-of-sensors/december-2017.csv"))
Sys.setenv(TZ='Poland') #we're looking at data from Poland, to avoid erors we'll use this command. If this is not given a timezone error will appear.
january$`UTC time` = as_datetime(january$`UTC time`)
february$`UTC time` = as_datetime(february$`UTC time`)
march$`UTC time` = as_datetime(march$`UTC time`)
april$`UTC time` = as_datetime(april$`UTC time`)
may$`UTC time` = as_datetime(may$`UTC time`)
june$`UTC time` = as_datetime(june$`UTC time`)
july$`UTC time` = as_datetime(july$`UTC time`)
august$`UTC time` = as_datetime(august$`UTC time`)
september$`UTC time` = as_datetime(september$`UTC time`)
october$`UTC time` = as_datetime(october$`UTC time`)
november$`UTC time` = as_datetime(november$`UTC time`)
december$`UTC time` = as_datetime(december$`UTC time`)
jan.test = january %>% select(contains("pm"))
feb.test = february %>% select(contains("pm"))
mar.test = march %>% select(contains("pm"))
apr.test = april %>% select(contains("pm"))
may.test = may %>% select(contains("pm"))
jun.test = june %>% select(contains("pm"))
jul.test = july %>% select(contains("pm"))
aug.test = august %>% select(contains("pm"))
sep.test = september %>% select(contains("pm"))
oct.test = october %>% select(contains("pm"))
nov.test = november %>% select(contains("pm"))
dec.test = december %>% select(contains("pm"))
yr.noname = data.frame(   # to store 3 cols of all sensor data from all months
pm010 = jan.test$`3_pm1`,
pm025 = jan.test$`3_pm25`,
pm100 = jan.test$`3_pm10`
)
next3rep = function(df.noname, df.test, col = 1){
while(col <= length(df.test)-2) {
df.next3 = df.test[col:(col+2)]
names(df.next3) = c("pm010", "pm025", "pm100")
df.noname = rbind(df.noname, df.next3)
col = col+3
}
return(df.noname)
}
yr.noname = next3rep(yr.noname, jan.test, col = 4)  # fill rest of jan
yr.noname = next3rep(yr.noname, feb.test)  # fill with feb
yr.noname = next3rep(yr.noname, mar.test)  # fill with mar
yr.noname = next3rep(yr.noname, apr.test)  # fill with apr
yr.noname = next3rep(yr.noname, may.test)  # fill with may
yr.noname = next3rep(yr.noname, jun.test)  # fill with jun
yr.noname = next3rep(yr.noname, jul.test)  # fill with jul
yr.noname = next3rep(yr.noname, aug.test)  # fill with aug
yr.noname = next3rep(yr.noname, sep.test)  # fill with sep
yr.noname = next3rep(yr.noname, oct.test)  # fill with oct
yr.noname = next3rep(yr.noname, nov.test)  # fill with nov
yr.noname = next3rep(yr.noname, dec.test)  # fill with dec
yr.noname[yr.noname < 0] = NA   # mark negative values NA
yr.noname = na.omit(yr.noname)  # eventually omit NA
# we need to remove outliers using interquartile range
outliers1 = boxplot.stats(yr.noname[ ,1],coef = 3)$out
outliers2 = boxplot.stats(yr.noname[ ,2],coef = 3)$out
outliers3 = boxplot.stats(yr.noname[ ,3],coef = 3)$out
yr.nout = yr.noname[-which(yr.noname[ ,1] %in% outliers1), ]
yr.nout = yr.noname[-which(yr.noname[ ,2] %in% outliers2), ]
yr.nout = yr.noname[-which(yr.noname[ ,3] %in% outliers3), ]
rownames(yr.nout) = NULL
# can delete, comparing frequencies removing outliers
par(mfrow=c(2,1))
plot(count(yr.noname$pm010))
plot(count(yr.nout$pm010))
plot(count(yr.noname$pm025))
plot(count(yr.nout$pm025))
plot(count(yr.noname$pm100))
plot(count(yr.nout$pm100))
hist(yr.noname$pm100)
hist(yr.nout$pm100)
# statistics
# yr.avg_pm010 = mean(yr.noname$pm010)
# yr.avg_pm025 = mean(yr.noname$pm025)
# yr.avg_pm100 = mean(yr.noname$pm100)
yr.avg_pm010 = mean(yr.nout$pm010)
yr.avg_pm025 = mean(yr.nout$pm025)
yr.avg_pm100 = mean(yr.nout$pm100)
# can delete, comparing frequencies
count(as.factor(ifelse(yr.noname$pm010 >= yr.avg_pm010, 1, 0)))
count(as.factor(ifelse(yr.noname$pm025 >= yr.avg_pm025, 1, 0)))
count(as.factor(ifelse(yr.noname$pm100 >= yr.avg_pm100, 1, 0)))
count(as.factor(ifelse(yr.nout$pm010 >= yr.avg_pm010, 1, 0)))
count(as.factor(ifelse(yr.nout$pm025 >= yr.avg_pm025, 1, 0)))
count(as.factor(ifelse(yr.nout$pm100 >= yr.avg_pm100, 1, 0)))
yr.avg_pm010
yr.avg_pm025
yr.avg_pm100
# statistics
yr.avg_pm010 = mean(yr.noname$pm010)
yr.avg_pm025 = mean(yr.noname$pm025)
yr.avg_pm100 = mean(yr.noname$pm100)
yr.avg_pm100
yr.avg_pm025
yr.avg_pm010
point <- sortPM(Sys.time(), 0)
example <- MlClassifier(point)
example
points = 0
append(points, point)
points <- c("pm010"=0, "pm025"=0, "pm100"=0)
rbind(points, point)
i <- i + 1
while ( i < 100){
point <- sortPM(Sys.time(), 0)
rbind(points, point)
i <- i + 1
}
i = 0
while ( i < 100){
point <- sortPM(Sys.time(), 0)
rbind(points, point)
i <- i + 1
}
points
points
point
rbind(points, point)
i <- i + 1
rbind(points, point)
rbind(points, point)
points <- rbind(points, point)
i <- i + 1
while ( i < 100){
point <- sortPM(Sys.time(), 0)
points <- rbind(points, point)
i <- i + 1
}
points
points <- rbind(points, point)
points <- rbind(points, point)
points
source('~/IE 332/IE332group27/g27/runMLClass.R')
while ( i < 100){
point <- sortPM(Sys.time(), 0)
points <- rbind(points, point)
i <- i + 1
}
points
i = 0
while ( i < 100){
point <- sortPM(Sys.time(), 0)
points <- rbind(points, point)
i <- i + 1
}
points
i = 0
while ( i < 100){
point <- sortPM(Sys.time(), 2)
points <- rbind(points, point)
i <- i + 1
}
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/buildCity.R')
example <- MlClassifier(points)
example
source('~/IE 332/IE332group27/g27/MLclassifier.R')
example <- MlClassifier()
example <- MlClassifier()
try <- data_label(points, example)
try
source('~/IE 332/IE332group27/g27/runMLClass.R')
source('~/IE 332/IE332group27/g27/runMLClass.R')
yr.std_pm010 = sd(yr.nout$pm010)
yr.std_pm025 = sd(yr.nout$pm025)
yr.std_pm100 = sd(yr.nout$pm100)
yr.std_pm010
yr.std_pm025
yr.std_pm100
source('~/IE 332/IE332group27/g27/MLclassifier.R')
source('~/IE 332/IE332group27/g27/MLclassifier.R')
