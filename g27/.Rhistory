location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
#Send to Database
if(loop == 1){
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
#}else{
# dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = FALSE, overwrite=TRUE, header = TRUE,row.names = FALSE)
}
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
if(loop == last_run){
for(i : length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_ID[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
}
}
air_data <- data.frame("time" = date_from_SQL, sensor_IDs, classed_data[, 1:3])
dbWriteTable(my_DB, "Air_Quality", air_data, append=TRUE, header=TRUE,row.names=FALSE)
}
#Sensor Formatting
send_to_DB <- function(location_sen, classed_data, loop, last_run, city_lat, city_long, my_DB, Q_ID, date_from_SQL){
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
#Send to Database
if(loop == 1){
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
#}else{
# dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = FALSE, overwrite=TRUE, header = TRUE,row.names = FALSE)
}
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
if(loop == last_run){
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_ID[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
}
}
air_data <- data.frame("time" = date_from_SQL, sensor_IDs, classed_data[, 1:3])
dbWriteTable(my_DB, "Air_Quality", air_data, append=TRUE, header=TRUE,row.names=FALSE)
}
start('jfinucan@purdue.edu', 1, 'Charlotte')
start('jfinucan@purdue.edu', 1, 'Charlotte')
#Intialize and load in database.
my_DB <- dbConnect(MySQL(), user='g1109699', password='MySQL27', dbname='g1109699', host='mydb.itap.purdue.edu')
on.exit(dbDisconnect(my_DB))
email_call <- paste0("SELECT Q_ID FROM Quote WHERE email =","'",email,"'",";")
email_query <- dbSendQuery(my_DB, email_call)
quotes <- dbFetch(email_query)
Q_ID <- quotes[quote_num, 1]
quote_num <- 1
email <- 'jfinucan@purdue.edu'
city <- charolette
city <- 'Charolette''
''
city <- 'Charolette'
Q_ID <- quotes[quote_num, 1]
dbClearResult(dbListResults(my_DB)[[1]])
#Generate inputs from quote.
quote_call <- paste0("SELECT * FROM Quote WHERE Q_ID =",Q_ID, ";")
input_query <- dbSendQuery(my_DB, quote_call)
inputs <- dbFetch(input_query)
#Budget from the quote.
budget <- inputs[1, "budget"]
#Geographic radius from the quote.
geo_radius <- inputs[1, "geoRadius"]
#Simulation start date from the quote (with formatting).
date_from_SQL <- inputs[1, "date"]
date_from_SQL <- as.POSIXlt(date_from_SQL)
input_month <- format(date_from_SQL,"%B")
#Length of simulation from the quote.
time_from_SQL <- inputs[1, "numDays"]
time_from_SQL <- 3/24
#Air quality focus from the quote (with mapping).
air_pref <- inputs[1, "airPref"]
if(air_pref == "good"){
air_pref <- 0
}else{
air_pref <- 3
}
#City coordinates from the quote (finds latitude and longitude automatically from inputted city).
city_lat <- inputs[1, "citylat"]
city_long <- inputs[1, "citylon"]
dbClearResult(dbListResults(my_DB)[[1]])
#Load in city CSV (with formatting).
city_CSV <- as.matrix(read.csv(paste0("sample cities/",city, ".csv"), header=F))
city_grid <- build_city(city_CSV)
city_grid_radius <- geo_radius / 20
city <- 'Charlotte'
#Load in city CSV (with formatting).
city_CSV <- as.matrix(read.csv(paste0("sample cities/",city, ".csv"), header=F))
city_grid <- build_city(city_CSV)
city_grid_radius <- geo_radius / 20
geo_difference <- (15000 - geo_radius) / 20
#Intialize variables for the loop.
pm_data <- NULL
new_pm_data <- NULL
hour_cnt <- 1
#Weather factor generation (1% chance every hour there is a storm).
storm_time <- sample(c(0,1), 1, prob = c(0.99, 0.01))
#Naive Bayes classifier.
classifier <- MlClassifier()
#Initital network placement.
mapped_network<- SA(budget, city_grid, geo_radius, just_values = F)
location_sen <- mapped_network$best
location_sen <- cbind(location_sen, "moving"= rep(0, length(location_sen[,1])))
#Run the network.
while(hour_cnt <= 24 * time_from_SQL){
pm_data <- NULL
new_pm_data <- NULL
i <- 1
print(hour_cnt)
#Generates particulate matter data from simulation.
while (i <= dim(location_sen)[1]){
new_pm_data <- sort_PM(date_from_SQL, city_grid[trunc(location_sen[i, 1] / 20) + city_grid_radius + geo_difference, trunc(location_sen[i, 2] / 20) + city_grid_radius + geo_difference], storm_time)
pm_data <- rbind(pm_data, new_pm_data)
i <- i + 1
}
#Movement of the mobile sensors.
classed_data <- data_label(pm_data, classifier[input_month])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
new_dests <- priority_destinations(location_sen, classed_data, air_pref)
updated_locations <- nearest_sensor_finder(new_dests, location_sen, air_pref, classed_data, geo_radius)
location_sen <- updated_locations
date_from_SQL <- date_from_SQL + 60 * 60
storm_time <- sample(c(0, 1), 1, prob = c(0.99, 0.01))
hour_cnt <- hour_cnt + 1
}
#Run the network.
while(hour_cnt <= 24 * time_from_SQL){
pm_data <- NULL
new_pm_data <- NULL
i <- 1
print(hour_cnt)
#Generates particulate matter data from simulation.
while (i <= dim(location_sen)[1]){
new_pm_data <- sort_PM(date_from_SQL, city_grid[trunc(location_sen[i, 1] / 20) + city_grid_radius + geo_difference, trunc(location_sen[i, 2] / 20) + city_grid_radius + geo_difference], storm_time)
pm_data <- rbind(pm_data, new_pm_data)
i <- i + 1
}
#Movement of the mobile sensors.
classed_data <- data_label(pm_data, classifier[input_month])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
new_dests <- priority_destinations(location_sen, classed_data, air_pref)
updated_locations <- nearest_sensor_finder(new_dests, location_sen, air_pref, classed_data, geo_radius)
location_sen <- updated_locations
date_from_SQL <- date_from_SQL + 60 * 60
storm_time <- sample(c(0, 1), 1, prob = c(0.99, 0.01))
hour_cnt <- hour_cnt + 1
}
hour_cnt <- 1
#Weather factor generation (1% chance every hour there is a storm).
storm_time <- sample(c(0,1), 1, prob = c(0.99, 0.01))
#Initital network placement.
mapped_network<- SA(budget, city_grid, geo_radius, just_values = F)
location_sen <- mapped_network$best
location_sen <- cbind(location_sen, "moving"= rep(0, length(location_sen[,1])))
#Run the network.
while(hour_cnt <= 24 * time_from_SQL){
pm_data <- NULL
new_pm_data <- NULL
i <- 1
print(hour_cnt)
#Generates particulate matter data from simulation.
while (i <= dim(location_sen)[1]){
new_pm_data <- sort_PM(date_from_SQL, city_grid[trunc(location_sen[i, 1] / 20) + city_grid_radius + geo_difference, trunc(location_sen[i, 2] / 20) + city_grid_radius + geo_difference], storm_time)
pm_data <- rbind(pm_data, new_pm_data)
i <- i + 1
}
#Movement of the mobile sensors.
classed_data <- data_label(pm_data, classifier[input_month])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
new_dests <- priority_destinations(location_sen, classed_data, air_pref)
updated_locations <- nearest_sensor_finder(new_dests, location_sen, air_pref, classed_data, geo_radius)
location_sen <- updated_locations
date_from_SQL <- date_from_SQL + 60 * 60
storm_time <- sample(c(0, 1), 1, prob = c(0.99, 0.01))
hour_cnt <- hour_cnt + 1
}
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
}
send_to_DB <- function(location_sen, classed_data, loop, last_run, city_lat, city_long, my_DB, Q_ID, date_from_SQL){
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
#Send to Database
if(loop == 1){
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
#}else{
# dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = FALSE, overwrite=TRUE, header = TRUE,row.names = FALSE)
}
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
if(loop == last_run){
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
}
}
air_data <- data.frame("time" = date_from_SQL, sensor_IDs, classed_data[, 1:3])
dbWriteTable(my_DB, "Air_Quality", air_data, append=TRUE, header=TRUE,row.names=FALSE)
}
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
send_to_DB <- function(location_sen, classed_data, loop, last_run, city_lat, city_long, my_DB, Q_ID, date_from_SQL){
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
#Send to Database
if(loop == 1){
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
#}else{
# dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = FALSE, overwrite=TRUE, header = TRUE,row.names = FALSE)
}
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
if(loop == last_run){
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbClearResult(dbListResults(my_DB)[[1]])
}
}
air_data <- data.frame("time" = date_from_SQL, sensor_IDs, classed_data[, 1:3])
dbWriteTable(my_DB, "Air_Quality", air_data, append=TRUE, header=TRUE,row.names=FALSE)
}
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
dbClearResult(dbListResults(conn)[[1]])
dbClearResult(dbListResults(my_DB)[[1]])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
lst_call
last_call
i
i=1
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_call
last_query <- dbSendQuery(my_DB, sensor_call)
dbClearResult(dbListResults(my_DB)[[1]])
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbClearResult(dbListResults(my_DB)[[1]])
}
start <- function(email, quote_num, city){
#email: string, email from the inputted quote.
#quote_num: int, the nth quote from the associated email (e.g. second quote for user = 2).
#city: string, the city being networked (should match name of the inputted city csv).
#Intialize and load in database.
my_DB <- dbConnect(MySQL(), user='g1109699', password='MySQL27', dbname='g1109699', host='mydb.itap.purdue.edu')
on.exit(dbDisconnect(my_DB))
email_call <- paste0("SELECT Q_ID FROM Quote WHERE email =","'",email,"'",";")
email_query <- dbSendQuery(my_DB, email_call)
quotes <- dbFetch(email_query)
Q_ID <- quotes[quote_num, 1]
dbClearResult(dbListResults(my_DB)[[1]])
#Generate inputs from quote.
quote_call <- paste0("SELECT * FROM Quote WHERE Q_ID =",Q_ID, ";")
input_query <- dbSendQuery(my_DB, quote_call)
inputs <- dbFetch(input_query)
#Budget from the quote.
budget <- inputs[1, "budget"]
#Geographic radius from the quote.
geo_radius <- inputs[1, "geoRadius"]
#Simulation start date from the quote (with formatting).
date_from_SQL <- inputs[1, "date"]
date_from_SQL <- as.POSIXlt(date_from_SQL)
input_month <- format(date_from_SQL,"%B")
#Length of simulation from the quote.
time_from_SQL <- inputs[1, "numDays"]
time_from_SQL <- 8/24
#Air quality focus from the quote (with mapping).
air_pref <- inputs[1, "airPref"]
if(air_pref == "good"){
air_pref <- 0
}else{
air_pref <- 3
}
#City coordinates from the quote (finds latitude and longitude automatically from inputted city).
city_lat <- inputs[1, "citylat"]
city_long <- inputs[1, "citylon"]
dbClearResult(dbListResults(my_DB)[[1]])
#Load in city CSV (with formatting).
city_CSV <- as.matrix(read.csv(paste0("sample cities/",city, ".csv"), header=F))
city_grid <- build_city(city_CSV)
city_grid_radius <- geo_radius / 20
geo_difference <- (15000 - geo_radius) / 20
#Intialize variables for the loop.
pm_data <- NULL
new_pm_data <- NULL
hour_cnt <- 1
#Weather factor generation (1% chance every hour there is a storm).
storm_time <- sample(c(0,1), 1, prob = c(0.99, 0.01))
#Naive Bayes classifier.
classifier <- MlClassifier()
#Initital network placement.
mapped_network<- SA(budget, city_grid, geo_radius, just_values = F)
location_sen <- mapped_network$best
location_sen <- cbind(location_sen, "moving"= rep(0, length(location_sen[,1])))
#Run the network.
while(hour_cnt <= 24 * time_from_SQL){
pm_data <- NULL
new_pm_data <- NULL
i <- 1
print(hour_cnt)
#Generates particulate matter data from simulation.
while (i <= dim(location_sen)[1]){
new_pm_data <- sort_PM(date_from_SQL, city_grid[trunc(location_sen[i, 1] / 20) + city_grid_radius + geo_difference, trunc(location_sen[i, 2] / 20) + city_grid_radius + geo_difference], storm_time)
pm_data <- rbind(pm_data, new_pm_data)
i <- i + 1
}
#Movement of the mobile sensors.
classed_data <- data_label(pm_data, classifier[input_month])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
new_dests <- priority_destinations(location_sen, classed_data, air_pref)
updated_locations <- nearest_sensor_finder(new_dests, location_sen, air_pref, classed_data, geo_radius)
location_sen <- updated_locations
date_from_SQL <- date_from_SQL + 60 * 60
storm_time <- sample(c(0, 1), 1, prob = c(0.99, 0.01))
hour_cnt <- hour_cnt + 1
}
return("Done :)")
}
##--SEND INFO TO DATABASE--##
#Sensor Formatting
send_to_DB <- function(location_sen, classed_data, loop, last_run, city_lat, city_long, my_DB, Q_ID, date_from_SQL){
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
#Send to Database
if(loop == 1){
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
#}else{
# dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = FALSE, overwrite=TRUE, header = TRUE,row.names = FALSE)
}
sensor_call <- paste0("SELECT S_ID FROM Sensor WHERE N_ID =", Q_ID, ";")
sensor_query <- dbSendQuery(my_DB, sensor_call)
sensor_IDs <- dbFetch(sensor_query)
print(date_from_SQL)
if(loop == last_run){
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbClearResult(dbListResults(my_DB)[[1]])
}
}
air_data <- data.frame("time" = date_from_SQL, sensor_IDs, classed_data[, 1:3])
dbWriteTable(my_DB, "Air_Quality", air_data, append=TRUE, header=TRUE,row.names=FALSE)
}
start(email, quote_num, city)
#Intialize and load in database.
my_DB <- dbConnect(MySQL(), user='g1109699', password='MySQL27', dbname='g1109699', host='mydb.itap.purdue.edu')
on.exit(dbDisconnect(my_DB))
email_call <- paste0("SELECT Q_ID FROM Quote WHERE email =","'",email,"'",";")
email_query <- dbSendQuery(my_DB, email_call)
quotes <- dbFetch(email_query)
Q_ID <- quotes[quote_num, 1]
dbClearResult(dbListResults(my_DB)[[1]])
#Generate inputs from quote.
quote_call <- paste0("SELECT * FROM Quote WHERE Q_ID =",Q_ID, ";")
input_query <- dbSendQuery(my_DB, quote_call)
inputs <- dbFetch(input_query)
#Budget from the quote.
budget <- inputs[1, "budget"]
#Geographic radius from the quote.
geo_radius <- inputs[1, "geoRadius"]
#Simulation start date from the quote (with formatting).
date_from_SQL <- inputs[1, "date"]
date_from_SQL <- as.POSIXlt(date_from_SQL)
input_month <- format(date_from_SQL,"%B")
#Length of simulation from the quote.
time_from_SQL <- inputs[1, "numDays"]
time_from_SQL <- 8/24
#Air quality focus from the quote (with mapping).
air_pref <- inputs[1, "airPref"]
if(air_pref == "good"){
air_pref <- 0
}else{
air_pref <- 3
}
#City coordinates from the quote (finds latitude and longitude automatically from inputted city).
city_lat <- inputs[1, "citylat"]
city_long <- inputs[1, "citylon"]
dbClearResult(dbListResults(my_DB)[[1]])
#Load in city CSV (with formatting).
city_CSV <- as.matrix(read.csv(paste0("sample cities/",city, ".csv"), header=F))
city_grid <- build_city(city_CSV)
city_grid_radius <- geo_radius / 20
geo_difference <- (15000 - geo_radius) / 20
#Intialize variables for the loop.
pm_data <- NULL
new_pm_data <- NULL
hour_cnt <- 1
#Weather factor generation (1% chance every hour there is a storm).
storm_time <- sample(c(0,1), 1, prob = c(0.99, 0.01))
#Initital network placement.
mapped_network<- SA(budget, city_grid, geo_radius, just_values = F)
location_sen <- mapped_network$best
location_sen <- cbind(location_sen, "moving"= rep(0, length(location_sen[,1])))
og_map <- location_sen
#Run the network.
while(hour_cnt <= 24 * time_from_SQL){
pm_data <- NULL
new_pm_data <- NULL
i <- 1
print(hour_cnt)
#Generates particulate matter data from simulation.
while (i <= dim(location_sen)[1]){
new_pm_data <- sort_PM(date_from_SQL, city_grid[trunc(location_sen[i, 1] / 20) + city_grid_radius + geo_difference, trunc(location_sen[i, 2] / 20) + city_grid_radius + geo_difference], storm_time)
pm_data <- rbind(pm_data, new_pm_data)
i <- i + 1
}
#Movement of the mobile sensors.
classed_data <- data_label(pm_data, classifier[input_month])
send_to_DB(location_sen, classed_data, hour_cnt, 24 * time_from_SQL, city_lat, city_long, my_DB, Q_ID, date_from_SQL)
new_dests <- priority_destinations(location_sen, classed_data, air_pref)
updated_locations <- nearest_sensor_finder(new_dests, location_sen, air_pref, classed_data, geo_radius)
location_sen <- updated_locations
date_from_SQL <- date_from_SQL + 60 * 60
storm_time <- sample(c(0, 1), 1, prob = c(0.99, 0.01))
hour_cnt <- hour_cnt + 1
}
og_map == location_sen
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
location_sen <- og_map
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
dbWriteTable(my_DB, "Sensor", data.frame("N_ID" = Q_ID, location_sen[, 1:3]), append = TRUE, header = TRUE,row.names = FALSE)
location_sen <- updated_locations
location_sen <- as.data.frame(location_sen)
location_sen[, 1] <- location_sen[, 1] / 111111 + city_lat
location_sen[, 2] <- location_sen[, 2] / (111111 * (cos(location_sen[, 1]))) + city_long
location_sen[, 3] <- ifelse(location_sen[, 3] == 1, "fixed", "mobile")
names(location_sen) <- c("lat", "lon", "type")
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbClearResult(dbListResults(my_DB)[[1]])
}
if(loop == last_run){
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbFetch(last_query)
dbClearResult(dbListResults(my_DB)[[1]])
}
}
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE table Sensor SET lat =", location_sen[i, 1], ",", "long =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbFetch(last_query)
dbClearResult(dbListResults(my_DB)[[1]])
}
last_call
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE Sensor SET lat =", location_sen[i, 1], ",", "lon =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1])
last_query <- dbSendQuery(my_DB, sensor_call)
dbFetch(last_query)
dbClearResult(dbListResults(my_DB)[[1]])
}
last_call
for(i in 1:length(sensor_IDs)){
last_call <- paste0("UPDATE Sensor SET lat =", location_sen[i, 1], ",", "lon =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1], ";")
last_query <- dbSendQuery(my_DB, sensor_call)
dbFetch(last_query)
dbClearResult(dbListResults(my_DB)[[1]])
}
sensor_IDs
length(sensor_IDs)
length(sensor_IDs[,1])
for(i in 1:length(sensor_IDs[,1])){
last_call <- paste0("UPDATE Sensor SET lat =", location_sen[i, 1], ",", "lon =", location_sen[i, 2], "WHERE S_ID=", sensor_IDs[i, 1], ";")
last_query <- dbSendQuery(my_DB, sensor_call)
dbFetch(last_query)
dbClearResult(dbListResults(my_DB)[[1]])
}
last_call
